
global
	log 127.0.0.1 local2 #log语法：log <address_1>[max_level_1] # 全局的日志配置，使用log关键字，指定使用127.0.0.1 上的syslog服务中的local0日志设备，记录日志等级为info的日志
                                                                     
	chroot /var/lib/haproxy   		#当前工作目录
	pidfile /var/run/haproxy.pid 	#当前进程id文件
	maxconn 6000  	#最大并发连接数
	user haproxy 	#所属用户
	group haproxy 	#所属组
	daemon 			#以守护进程方式运行haproxy
	stats socket /var/lib/haproxy/stats
defaults
	mode http 	#默认的模式mode { tcp|http|health }，tcp是4层，http是7层，health只会返回OK
	log global	#应用全局的日志配置
	option httplog	#启用日志记录HTTP请求，默认haproxy日志记录是不记录HTTP请求日志
	option dontlognull	# 启用该项，日志中将不会记录空连接。所谓空连接就是在上游的负载均衡器或者监控系统为了探测该 服务是否存活可用时，需要定期的连接或者获取某一固定的组件或页面，或者探测扫描端口是否在监听或开放等动作被称为空连接；官方文档中标注，如果该服务上游没有其他的负载均衡器的话，建议不要使用该参数，因为互联网上的恶意扫描或其他动作就不会被记录下来
	option http-server-close  #每次请求完毕后主动关闭http通道
	option forwardfor except 127.0.0.0/8 #如果服务器上的应用程序想记录发起请求的客户端的IP地址，需要在HAProxy上 配置此选项， 这样 HAProxy会把客户端的IP信息发送给服务器，在HTTP请求中添加"X-Forwarded-For"字段。 启用  X-Forwarded-For，在requests头部插入客户端IP发送给后端的server，使后端server获取到客户端的真实IP。
	option redispatch   # 当使用了cookie时，haproxy将会将其请求的后端服务器的serverID插入到cookie中，以保证会话的SESSION持久性；而此时，如果后端的服务器宕掉了， 但是客户端的cookie是不会刷新的，如果设置此参数，将会将客户的请求强制定向到另外一个后端server上，以保证服务的正常。
	retries 3   	# 定义连接后端服务器的失败重连次数，连接失败次数超过此值后将会将对应后端服务器标记为不可用
	timeout http-request 10s 	#http请求超时时间
	timeout queue 1m 			#一个请求在队列里的超时时间
	timeout connect 10s			#连接超时
	timeout client 1m			#客户端超时
	timeout server 1m			#服务器端超时
	timeout http-keep-alive 10s	#设置http-keep-alive的超时时间
	timeout check 10s			#检测超时
	maxconn 6000				#每个进程可用的最大连接数
listen stats 	#统计界面
	mode http
	bind *:2080	
	stats enable 
	stats refresh 30s
	stats uri /hastats
	stats realm Haproxy\ Statistics  
	stats auth admin:admin
	stats admin if TRUE
frontend healthcheck
	bind :1099 	#定义外部检测机制
	mode http	#http 负载均衡
	option httpclose
	option forwardfor
	default_backend AnuoApcNodes
frontend http-in
	bind *:88 #监听的端口,将请求转发到 default_backend 配置的集群 AnuoApcNodes
	mode http 
	log global
	option httpclose
	option logasap #不等待响应结束就记录日志，表示提前记录日志，一般日志会记录响应时长，此不记录响应时长
	option dontlognull #不记录空信息
	capture request header Host len 20 #记录请求首部的前20个字符
	capture request header Referer len 60 #referer跳转引用，就是上一级
	default_backend AnuoApcNodes #处理请求的服务器集群
backend AnuoApcNodes 	#处理请求的服务器集群
	mode http
	balance roundrobin
	#check : 下面的check 表示ha 需要检查此节点的状态
	server websrv1 192.168.2.108:9090 check maxconn 6000
	server websrv2 192.168.1.112:88 check maxconn 6000
	
listen SQLServer :1433  #tcp 负载均衡
	mode tcp
	balance roundrobin
	#weight : 权重, 表示此节点的优先级,值越高(最高256) , 优先执行越高
	#check port : 检测是否存活的端口
	#inter : interval 检测是否存活的 时间间隔
	#rise : server 从离线状态转为正常状态后, 需要复查的次数(看是否正常)
	#fall : server 从正常状态转换为不可用状态需要检查的次数
	server SQLServer1 192.168.2.101:1433 weight 1 maxconn 6000 check port 1433 inter 2000 rise 2 fall 2
	server SQLServer2 192.168.2.203:1433 weight 1 maxconn 6000 check port 1433 inter 2000 rise 2 fall 2

listen Redis :6378  #tcp 负载均衡
	mode tcp
	balance roundrobin
	#weight : 权重, 表示此节点的优先级,值越高(最高256) , 优先执行越高
	#check port : 检测是否存活的端口
	#inter : interval 检测是否存活的 时间间隔
	#rise : server 从离线状态转为正常状态后, 需要复查的次数(看是否正常)
	#fall : server 从正常状态转换为不可用状态需要检查的次数
	server redis1 192.168.2.113:6379 weight 1 maxconn 6000 check port 6379 inter 2000 rise 2 fall 2
	server redis1 192.168.2.111:6379 weight 1 maxconn 6000 check port 6379 inter 2000 rise 2 fall 2

listen MySQL :3308  #tcp 负载均衡
	mode tcp
	balance roundrobin
	#weight : 权重, 表示此节点的优先级,值越高(最高256) , 优先执行越高
	#check port : 检测是否存活的端口
	#inter : interval 检测是否存活的 时间间隔
	#rise : server 从离线状态转为正常状态后, 需要复查的次数(看是否正常)
	#fall : server 从正常状态转换为不可用状态需要检查的次数
	server mysql2 192.168.2.111:3306 weight 1 maxconn 6000 check port 3306 inter 2000 rise 2 fall 2
	server mysql3 192.168.2.103:3306 weight 1 maxconn 6000 check port 3306 inter 2000 rise 2 fall 2
